Ruta: package.json
------------------------------------------------------------
{
      "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
      },
      "dependencies": {
        "react": "^18.0.0",
        "react-dom": "^18.0.0",
        "react-scripts": "^5.0.0",
        "postcss": "^8",
        "tailwindcss": "^3.4.1",
        "autoprefixer": "^10.0.0",
        "tailwind-merge": "^2.4.0",
        "tailwindcss-animate": "^1.0.7"
      },
      "main": "/index.js",
      "devDependencies": {},
      "browserslist": {
        "production": [
          ">0.2%",
          "not dead",
          "not op_mini all"
        ],
        "development": [
          "last 1 chrome version",
          "last 1 firefox version",
          "last 1 safari version"
        ]
      }
    }
================================================================================

Ruta: postcss.config.js
------------------------------------------------------------
/** @type {import('postcss-load-config').Config} */
const config = {
      plugins: {
        tailwindcss: {},
      },
    };

    export default config
================================================================================

Ruta: tailwind.config.js
------------------------------------------------------------
/** @type {import('tailwindcss').Config} */
      module.exports = {
        content: [
          "./src/**/*.{js,jsx,ts,tsx}",
        ],
        theme: {
          extend: {},
        },
        plugins: [],
      }
================================================================================

Ruta: src/supabaseClient.js
------------------------------------------------------------
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://lvbkahnjsxpbhmykszgu.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx2YmthaG5qc3hwYmhteWtzemd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MjM0NDksImV4cCI6MjA2OTQ5OTQ0OX0.9Bw1D_OatLldEuA1msMI-_Ut26gGeH4GZ2xFDJ1Xrh0';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// ¡Advertencia! No pongas tus claves secretas de servidor aquí en una aplicación real.
// Esto es solo para que veas cómo se conecta.
// Para producción, usa variables de entorno y un backend seguro.
================================================================================

Ruta: src/package.js
------------------------------------------------------------
on

{
  "dependencies": {
    "@supabase/supabase-js": "^2.43.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-scripts": "^5.0.0",
    "framer-motion": "latest",
    "lucide-react": "latest",
    "react-router-dom": "latest",
    "react-icons": "latest",
    "bootstrap": "^5.3.3"
  },
  "main": "/index.js",
  "devDependencies": {}
}
================================================================================

Ruta: src/App.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import SearchBar from './components/SearchBar';
import { searchMediaFromSupabase, fetchAndStoreGenres } from './utils/api';
import HomePage from './pages/HomePage';
import MoviesPage from './pages/MoviesPage';
import SeriesPage from './pages/SeriesPage';
import GenresPage from './pages/GenresPage';
import DetailPage from './pages/DetailPage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import { User, LogOut } from 'lucide-react';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';
import { supabase } from './utils/supabase'; // Importa la instancia de Supabase

const App = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [loadingSearch, setLoadingSearch] = useState(false);
  const [errorSearch, setErrorSearch] = useState(null);
  const [user, setUser] = useState(null);
  const [globalError, setGlobalError] = useState(null); // Estado para errores globales

  useEffect(() => {
    // Sincronizar géneros y algunos datos iniciales de TMDB a Supabase
    const syncInitialData = async () => {
      try {
        await fetchAndStoreGenres();
        // Puedes llamar a estas funciones para poblar tu DB con más datos
        // await getTrendingMoviesAndStore(1);
        // await getPopularMoviesAndStore(1);
        // await getPopularTvShowsAndStore(1);
      } catch (err) {
        setGlobalError("Error al sincronizar datos iniciales: " + err.message);
        console.error("Error al sincronizar datos iniciales:", err);
      }
    };
    syncInitialData();

    // Manejar el estado de autenticación del usuario
    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user || null);
    });

    // Obtener el usuario actual al cargar la app
    const getUser = async () => {
      try {
        const { data: { user } } = await supabase.auth.getUser();
        setUser(user);
      } catch (err) {
        setGlobalError("Error al obtener el usuario: " + err.message);
        console.error("Error al obtener el usuario:", err);
      }
    };
    getUser();

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, []);

  const handleSearch = async (query) => {
    setLoadingSearch(true);
    setErrorSearch(null);
    try {
      const results = await searchMediaFromSupabase(query);
      setSearchResults(results);
    } catch (err) {
      setErrorSearch("¡Ups! Parece que el universo de las películas no quiere cooperar hoy. Intenta de nuevo más tarde.");
      console.error(err);
    } finally {
      setLoadingSearch(false);
    }
  };

  const handleLogout = async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      setUser(null);
    } catch (error) {
      setGlobalError("Error al cerrar sesión: " + error.message);
      console.error("Error al cerrar sesión:", error);
    }
  };

  return (
    <Router>
      <div className="min-h-screen bg-gray-950 text-white">
        {globalError && (
          <motion.div
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -50 }}
            className="fixed top-0 left-0 right-0 bg-red-800 text-white p-3 text-center z-50 shadow-lg"
          >
            <p className="font-bold">¡Error crítico! {globalError}</p>
            <button onClick={() => setGlobalError(null)} className="ml-4 text-white/80 hover:text-white font-semibold">
              X
            </button>
          </motion.div>
        )}

        <motion.nav
          className="bg-gray-900 p-3 shadow-lg border-b border-red-900"
          initial={{ y: -100 }}
          animate={{ y: 0 }}
          transition={{ type: "spring", stiffness: 120, damping: 14 }}
        >
          <div className="container mx-auto flex justify-between items-center">
            <Link to="/" className="text-3xl font-extrabold text-red-700 hover:text-red-600 transition-colors tracking-wide">
              CineNerd
            </Link>
            <div className="flex items-center space-x-6">
              <Link to="/" className="text-gray-300 hover:text-white transition-colors font-medium">Inicio</Link>
              <Link to="/peliculas" className="text-gray-300 hover:text-white transition-colors font-medium">Películas</Link>
              <Link to="/series" className="text-gray-300 hover:text-white transition-colors font-medium">Series</Link>
              <Link to="/genero" className="text-gray-300 hover:text-white transition-colors font-medium">Géneros</Link>
              <SearchBar onSearch={handleSearch} />
              {user ? (
                <div className="flex items-center space-x-3">
                  <span className="text-gray-300 text-sm hidden md:block">Hola, {user.user_metadata?.username || user.email}</span>
                  <motion.button
                    onClick={handleLogout}
                    className="p-2 rounded-full bg-red-700 hover:bg-red-600 text-white transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    title="Cerrar Sesión"
                  >
                    <LogOut className="w-5 h-5" />
                  </motion.button>
                </div>
              ) : (
                <Link to="/login" className="text-gray-300 hover:text-white transition-colors">
                  <User className="w-6 h-6" />
                </Link>
              )}
            </div>
          </div>
        </motion.nav>

        <main className="container mx-auto px-4 py-8 max-w-7xl">
          <Routes>
            <Route path="/" element={<HomePage searchResults={searchResults} loadingSearch={loadingSearch} errorSearch={errorSearch} />} />
            <Route path="/peliculas" element={<MoviesPage />} />
            <Route path="/series" element={<SeriesPage />} />
            <Route path="/genero" element={<GenresPage />} />
            <Route path="/detalle/:id" element={<DetailPage currentUser={user} />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
          </Routes>
        </main>
      </div>
    </Router>
  );
};

export default App;
================================================================================

Ruta: src/package.json
------------------------------------------------------------
{
  "dependencies": {
    "@supabase/supabase-js": "^2.43.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-scripts": "^5.0.0",
    "framer-motion": "latest",
    "lucide-react": "latest",
    "react-router-dom": "latest",
    "react-icons": "latest",
    "bootstrap": "^5.3.3"
  },
  "main": "/index.js",
  "devDependencies": {}
}
================================================================================

Ruta: src/styles.css
------------------------------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;
================================================================================

Ruta: src/index.js
------------------------------------------------------------
import React, { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./styles.css";

import App from "./App";

const root = createRoot(document.getElementById("root"));
root.render(
  <StrictMode>
    <App />
  </StrictMode>
);
================================================================================

Ruta: src/utils/supabase.js
------------------------------------------------------------
import { createClient } from '@supabase/supabase-js';

// Asegúrate de que estas variables de entorno estén configuradas correctamente
// En un entorno de desarrollo, puedes ponerlas directamente aquí para probar,
// pero en producción, ¡usa variables de entorno de verdad!
const supabaseUrl = 'https://lvbkahnjsxpbhmykszgu.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx2YmthaG5qc3hwYmhteWtzemd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5MjM0NDksImV4cCI6MjA2OTQ5OTQ0OX0.9Bw1D_OatLldEuA1msMI-_Ut26gGeH4GZ2xFDJ1Xrh0';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// ¡Ahora puedes usar 'supabase' en cualquier parte de tu aplicación!
// ¿Ves? No era tan difícil.
================================================================================

Ruta: src/utils/api.js
------------------------------------------------------------
import { supabase } from './supabase';

const TMDB_API_KEY = 'd2e33bf83c577e0dd8809435ede612da';
const OMDB_API_KEY = '274e7f62';
const TMDB_BASE_URL = 'https://api.themoviedb.org/3';
const OMDB_BASE_URL = 'https://www.omdbapi.com';

// Función para manejar errores de forma centralizada
const handleError = (error, message = "Ocurrió un error inesperado.") => {
  console.error("API Error:", message, error);
  // Aquí podrías integrar un sistema de logs o notificaciones de errores
  throw new Error(message);
};

// Función para obtener géneros de TMDB y guardarlos en Supabase
export const fetchAndStoreGenres = async () => {
  try {
    const [movieGenresRes, tvGenresRes] = await Promise.all([
      fetch(`${TMDB_BASE_URL}/genre/movie/list?api_key=${TMDB_API_KEY}&language=es-ES`),
      fetch(`${TMDB_BASE_URL}/genre/tv/list?api_key=${TMDB_API_KEY}&language=es-ES`)
    ]);

    if (!movieGenresRes.ok || !tvGenresRes.ok) {
      handleError(new Error(`HTTP error! Movie genres: ${movieGenresRes.status}, TV genres: ${tvGenresRes.status}`), "Error al obtener géneros de TMDB.");
    }

    const movieGenresData = await movieGenresRes.json();
    const tvGenresData = await tvGenresRes.json();

    const allGenres = [...movieGenresData.genres, ...tvGenresData.genres];
    const uniqueGenres = Array.from(new Map(allGenres.map(genre => [genre.id, genre])).values());

    const { data, error } = await supabase
      .from('genres')
      .upsert(uniqueGenres, { onConflict: 'id' });

    if (error) handleError(error, "Error al sincronizar géneros con Supabase.");
    console.log('Géneros sincronizados con Supabase:', data);
    return uniqueGenres;
  } catch (error) {
    handleError(error, "Error en fetchAndStoreGenres.");
  }
};

// Función para obtener géneros desde Supabase
export const getGenresFromSupabase = async () => {
  try {
    const { data, error } = await supabase
      .from('genres')
      .select('*');
    if (error) handleError(error, "Error obteniendo géneros de Supabase.");
    return data;
  } catch (error) {
    handleError(error, "Error en getGenresFromSupabase.");
  }
};

// Función genérica para buscar y almacenar películas/series
const fetchAndStoreMedia = async (endpoint, mediaType, page = 1) => {
  try {
    const response = await fetch(
      `${TMDB_BASE_URL}${endpoint}?api_key=${TMDB_API_KEY}&language=es-ES&page=${page}`
    );
    if (!response.ok) {
      handleError(new Error(`HTTP error! status: ${response.status}`), `Error al obtener ${mediaType} de TMDB.`);
    }
    const data = await response.json();
    const items = data.results.map(item => ({
      id: item.id,
      title: item.title || item.name,
      original_title: item.original_title || item.original_name,
      overview: item.overview,
      poster_path: item.poster_path,
      backdrop_path: item.backdrop_path,
      release_date: item.release_date,
      first_air_date: item.first_air_date,
      vote_average: item.vote_average,
      vote_count: item.vote_count,
      media_type: mediaType,
      popularity: item.popularity,
      original_language: item.original_language,
      imdb_id: item.imdb_id || null,
      runtime: item.runtime || null,
      number_of_seasons: item.number_of_seasons || null,
      number_of_episodes: item.number_of_episodes || null,
      status: item.status || null,
      tagline: item.tagline || null,
      homepage: item.homepage || null,
      genre_ids: item.genre_ids
    }));

    const { data: insertedData, error } = await supabase
      .from('movies_tv')
      .upsert(items, { onConflict: 'id' });

    if (error) handleError(error, `Error al sincronizar ${mediaType} con Supabase.`);

    for (const item of items) {
      if (item.genre_ids && item.genre_ids.length > 0) {
        const genreRelations = item.genre_ids.map(genre_id => ({
          movie_tv_id: item.id,
          genre_id: genre_id
        }));
        const { error: genreError } = await supabase
          .from('movie_tv_genres')
          .upsert(genreRelations, { onConflict: ['movie_tv_id', 'genre_id'] });
        if (genreError) console.error(`Error insertando géneros para ${item.title}:`, genreError);
      }
    }

    console.log(`Datos de ${mediaType} sincronizados con Supabase.`, insertedData);
    return items;
  } catch (error) {
    handleError(error, `Error en fetchAndStoreMedia para ${mediaType}.`);
  }
};

// Funciones para obtener y almacenar datos específicos
export const getTrendingMoviesAndStore = async (page = 1) => fetchAndStoreMedia('/trending/movie/week', 'movie', page);
export const getPopularMoviesAndStore = async (page = 1) => fetchAndStoreMedia('/movie/popular', 'movie', page);
export const getPopularTvShowsAndStore = async (page = 1) => fetchAndStoreMedia('/tv/popular', 'tv', page);

// Funciones para obtener datos directamente de Supabase
export const getMoviesFromSupabase = async (genreId = null) => {
  try {
    let query = supabase
      .from('movies_tv')
      .select('*, movie_tv_genres(genre_id)')
      .eq('media_type', 'movie')
      .order('popularity', { ascending: false });

    if (genreId) {
      query = query.filter('movie_tv_genres.genre_id', 'eq', genreId);
    }

    const { data, error } = await query;
    if (error) handleError(error, "Error obteniendo películas de Supabase.");

    return data.map(item => ({
      ...item,
      genre_ids: item.movie_tv_genres.map(g => g.genre_id)
    }));
  } catch (error) {
    handleError(error, "Error en getMoviesFromSupabase.");
  }
};

export const getTvShowsFromSupabase = async (genreId = null) => {
  try {
    let query = supabase
      .from('movies_tv')
      .select('*, movie_tv_genres(genre_id)')
      .eq('media_type', 'tv')
      .order('popularity', { ascending: false });

    if (genreId) {
      query = query.filter('movie_tv_genres.genre_id', 'eq', genreId);
    }

    const { data, error } = await query;
    if (error) handleError(error, "Error obteniendo series de Supabase.");

    return data.map(item => ({
      ...item,
      genre_ids: item.movie_tv_genres.map(g => g.genre_id)
    }));
  } catch (error) {
    handleError(error, "Error en getTvShowsFromSupabase.");
  }
};

export const getMediaDetailsFromSupabase = async (id, mediaType) => {
  try {
    const { data, error } = await supabase
      .from('movies_tv')
      .select('*, movie_tv_genres(genre_id)')
      .eq('id', id)
      .eq('media_type', mediaType)
      .single();

    if (error) handleError(error, `Error obteniendo detalles de ${mediaType} ${id} de Supabase.`);

    let omdbDetails = null;
    if (data.imdb_id) {
      omdbDetails = await getOmdbDetails(data.imdb_id);
    }

    return {
      ...data,
      genre_ids: data.movie_tv_genres.map(g => g.genre_id),
      omdbDetails: omdbDetails
    };
  } catch (error) {
    handleError(error, `Error en getMediaDetailsFromSupabase para ${mediaType} ${id}.`);
  }
};

export const searchMediaFromSupabase = async (query) => {
  try {
    const { data, error } = await supabase
      .from('movies_tv')
      .select('*, movie_tv_genres(genre_id)')
      .ilike('title', `%${query}%`)
      .order('popularity', { ascending: false })
      .limit(20);

    if (error) handleError(error, "Error buscando medios en Supabase.");

    return data.map(item => ({
      ...item,
      genre_ids: item.movie_tv_genres.map(g => g.genre_id)
    }));
  } catch (error) {
    handleError(error, "Error en searchMediaFromSupabase.");
  }
};

export const getOmdbDetails = async (imdbId) => {
  try {
    if (!imdbId) return null;
    const response = await fetch(
      `${OMDB_BASE_URL}/?i=${imdbId}&apikey=${OMDB_API_KEY}`
    );
    if (!response.ok) {
      handleError(new Error(`HTTP error! status: ${response.status}`), `Error al obtener detalles de OMDb para ${imdbId}.`);
    }
    const data = await response.json();
    return data.Response === "True" ? data : null;
  } catch (error) {
    handleError(error, `Error en getOmdbDetails para ${imdbId}.`);
  }
};

// Funciones de autenticación
export const signUpUser = async (email, password, username) => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          username: username,
        },
      },
    });
    if (error) handleError(error, "Error al registrar usuario.");
    return data;
  } catch (error) {
    handleError(error, "Error en signUpUser.");
  }
};

export const signInUser = async (email, password) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) handleError(error, "Error al iniciar sesión.");
    return data;
  } catch (error) {
    handleError(error, "Error en signInUser.");
  }
};

export const signOutUser = async () => {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) handleError(error, "Error al cerrar sesión.");
    return true;
  } catch (error) {
    handleError(error, "Error en signOutUser.");
  }
};

export const getCurrentUser = async () => {
  try {
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) handleError(error, "Error al obtener usuario actual.");
    return user;
  } catch (error) {
    handleError(error, "Error en getCurrentUser.");
  }
};

// Funciones de interacción (likes/comments)
export const addInteraction = async (userId, mediaId, mediaType, interactionType, commentText = null) => {
  try {
    const { data, error } = await supabase
      .from('user_interactions')
      .upsert({
        user_id: userId,
        movie_tv_id: mediaId,
        media_type: mediaType,
        interaction_type: interactionType,
        comment_text: commentText
      }, { onConflict: ['user_id', 'movie_tv_id', 'interaction_type'] });

    if (error) handleError(error, "Error al añadir interacción.");
    return data;
  } catch (error) {
    handleError(error, "Error en addInteraction.");
  }
};

export const getCommentsForMedia = async (mediaId, mediaType) => {
  try {
    const { data, error } = await supabase
      .from('user_interactions')
      .select(`
        comment_text,
        created_at,
        users(username)
      `)
      .eq('movie_tv_id', mediaId)
      .eq('media_type', mediaType)
      .eq('interaction_type', 'comment')
      .order('created_at', { ascending: false });

    if (error) handleError(error, "Error al obtener comentarios.");
    return data;
  } catch (error) {
    handleError(error, "Error en getCommentsForMedia.");
  }
};
================================================================================

Ruta: src/components/SearchBar.js
------------------------------------------------------------
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Search } from 'lucide-react';

const SearchBar = ({ onSearch }) => {
  const [query, setQuery] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (query.trim()) {
      onSearch(query.trim());
    }
  };

  return (
    <motion.form
      onSubmit={handleSubmit}
      className="relative flex items-center w-full max-w-md mx-auto"
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Busca películas o series..."
        className="w-full px-5 py-3 pr-12 text-white bg-gray-800 border border-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-red-600 transition-all duration-300 placeholder-gray-500"
      />
      <motion.button
        type="submit"
        className="absolute right-3 top-1/2 -translate-y-1/2 p-2 bg-red-700 rounded-full text-white hover:bg-red-600 transition-colors duration-300"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.9 }}
      >
        <Search className="w-5 h-5" />
      </motion.button>
    </motion.form>
  );
};

export default SearchBar;
================================================================================

Ruta: src/components/MovieCard.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Star, Play } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { getGenresFromSupabase } from '../utils/api';

const MovieCard = ({ item }) => {
  const navigate = useNavigate();
  const [genresMap, setGenresMap] = useState({});

  useEffect(() => {
    const fetchGenres = async () => {
      try {
        const genres = await getGenresFromSupabase();
        const map = {};
        genres.forEach(genre => {
          map[genre.id] = genre.name;
        });
        setGenresMap(map);
      } catch (error) {
        console.error("Error al cargar géneros para MovieCard:", error);
        // Podrías mostrar un mensaje de error al usuario o usar un fallback
      }
    };
    fetchGenres();
  }, []);

  const imageUrl = item.poster_path
    ? `https://image.tmdb.org/t/p/w500${item.poster_path}`
    : 'https://via.placeholder.com/500x750?text=No+Poster';

  const title = item.title || item.name;
  const mediaType = item.media_type === 'movie' ? 'Película' : 'Serie';
  const rating = item.vote_average ? item.vote_average.toFixed(1) : 'N/A';
  const categories = item.genre_ids && item.genre_ids.length > 0
    ? item.genre_ids.map(id => genresMap[id]).filter(Boolean).join(', ')
    : 'Desconocido';

  const handleViewDetails = () => {
    navigate(`/detalle/${item.id}?type=${item.media_type}`);
  };

  return (
    <motion.div
      className="relative bg-gray-800 rounded-xl overflow-hidden shadow-lg border border-gray-700 cursor-pointer group"
      whileHover={{ scale: 1.05, boxShadow: "0 15px 25px -5px rgba(0, 0, 0, 0.4)" }}
      transition={{ duration: 0.3 }}
    >
      <img
        src={imageUrl}
        alt={title}
        className="w-full h-80 object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
      />
      <div className="p-4">
        <h3 className="text-xl font-semibold text-red-500 mb-2 truncate">{title}</h3>
        <p className="text-gray-400 text-sm">{mediaType}</p>
        <div className="flex items-center text-yellow-400 text-sm mt-2">
          <Star className="w-4 h-4 mr-1" />
          <span>{rating}</span>
        </div>
      </div>

      {/* Hover Overlay */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent flex flex-col justify-end p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300"
        initial={{ opacity: 0 }}
        animate={{ opacity: 0 }}
        whileHover={{ opacity: 1 }}
        transition={{ duration: 0.3 }}
      >
        <h3 className="text-2xl font-bold text-white mb-2">{title}</h3>
        <p className="text-gray-300 text-sm mb-1">{categories}</p>
        <div className="flex items-center text-yellow-400 text-lg mb-4">
          <Star className="w-5 h-5 mr-2" />
          <span>{rating}</span>
        </div>
        <motion.button
          onClick={handleViewDetails}
          className="bg-red-700 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full flex items-center justify-center transition-colors duration-300"
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
        >
          <Play className="w-5 h-5 mr-2" />
          Ver ahora
        </motion.button>
      </motion.div>
    </motion.div>
  );
};

export default MovieCard;
================================================================================

Ruta: src/pages/MoviesPage.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { getMoviesFromSupabase, getGenresFromSupabase } from '../utils/api';
import MovieCard from '../components/MovieCard';

const MoviesPage = () => {
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [genresMap, setGenresMap] = useState({});
  const [selectedGenreId, setSelectedGenreId] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [movieData, genreData] = await Promise.all([
          getMoviesFromSupabase(),
          getGenresFromSupabase()
        ]);
        setMovies(movieData);

        const map = {};
        genreData.forEach(genre => {
          map[genre.id] = genre.name;
        });
        setGenresMap(map);
      } catch (err) {
        console.error("Error al cargar películas:", err);
        setError("¡Vaya! No pudimos cargar las películas. Intenta de nuevo más tarde.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const filteredMovies = selectedGenreId
    ? movies.filter(movie => movie.genre_ids && movie.genre_ids.includes(parseInt(selectedGenreId)))
    : movies;

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">Cargando el universo cinematográfico...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-red-500 text-xl">{error}</p>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, x: -50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5 }}
      className="text-center"
    >
      <h1 className="text-4xl font-bold text-red-600 mb-8">Todas las Películas</h1>
      <p className="text-lg text-gray-300 mb-8">
        Aquí encontrarás un listado exclusivo de películas. ¡Prepárate para una sobredosis de cine!
      </p>

      <motion.div
        className="mb-8 text-left max-w-xs mx-auto md:mx-0"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2, duration: 0.5 }}
      >
        <label htmlFor="genre-select" className="block text-gray-300 text-lg font-semibold mb-2">
          Filtrar por Género:
        </label>
        <select
          id="genre-select"
          className="block w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
          value={selectedGenreId}
          onChange={(e) => setSelectedGenreId(e.target.value)}
        >
          <option value="">Todos los Géneros</option>
          {Object.entries(genresMap).map(([id, name]) => (
            <option key={id} value={id}>{name}</option>
          ))}
        </select>
      </motion.div>

      {filteredMovies.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
          {filteredMovies.map((movie) => (
            <MovieCard key={movie.id} item={movie} />
          ))}
        </div>
      ) : (
        <p className="text-gray-500 text-xl mt-8">No se encontraron películas para el género seleccionado. ¡Qué tragedia!</p>
      )}
    </motion.div>
  );
};

export default MoviesPage;
================================================================================

Ruta: src/pages/SeriesPage.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { getTvShowsFromSupabase, getGenresFromSupabase } from '../utils/api';
import MovieCard from '../components/MovieCard';

const SeriesPage = () => {
  const [series, setSeries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [genresMap, setGenresMap] = useState({});
  const [selectedGenreId, setSelectedGenreId] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [tvShowData, genreData] = await Promise.all([
          getTvShowsFromSupabase(),
          getGenresFromSupabase()
        ]);
        setSeries(tvShowData);

        const map = {};
        genreData.forEach(genre => {
          map[genre.id] = genre.name;
        });
        setGenresMap(map);
      } catch (err) {
        console.error("Error al cargar series:", err);
        setError("¡Vaya! No pudimos cargar las series. Intenta de nuevo más tarde.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  const filteredSeries = selectedGenreId
    ? series.filter(tvShow => tvShow.genre_ids && tvShow.genre_ids.includes(parseInt(selectedGenreId)))
    : series;

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">Cargando el universo de series...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-red-500 text-xl">{error}</p>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, x: 50 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.5 }}
      className="text-center"
    >
      <h1 className="text-4xl font-bold text-red-600 mb-8">Todas las Series</h1>
      <p className="text-lg text-gray-300 mb-8">
        Sumérgete en el mundo de las series. Aquí podrás encontrar tu próxima maratón.
      </p>

      <motion.div
        className="mb-8 text-left max-w-xs mx-auto md:mx-0"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2, duration: 0.5 }}
      >
        <label htmlFor="genre-select" className="block text-gray-300 text-lg font-semibold mb-2">
          Filtrar por Género:
        </label>
        <select
          id="genre-select"
          className="block w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
          value={selectedGenreId}
          onChange={(e) => setSelectedGenreId(e.target.value)}
        >
          <option value="">Todos los Géneros</option>
          {Object.entries(genresMap).map(([id, name]) => (
            <option key={id} value={id}>{name}</option>
          ))}
        </select>
      </motion.div>

      {filteredSeries.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
          {filteredSeries.map((tvShow) => (
            <MovieCard key={tvShow.id} item={tvShow} />
          ))}
        </div>
      ) : (
        <p className="text-gray-500 text-xl mt-8">No se encontraron series para el género seleccionado. ¡Qué desilusión!</p>
      )}
    </motion.div>
  );
};

export default SeriesPage;
================================================================================

Ruta: src/pages/GenresPage.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { getGenresFromSupabase, getMoviesFromSupabase, getTvShowsFromSupabase } from '../utils/api';
import MovieCard from '../components/MovieCard';

const GenresPage = () => {
  const [genres, setGenres] = useState([]);
  const [selectedGenre, setSelectedGenre] = useState(null);
  const [filteredItems, setFilteredItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [allMoviesAndTv, setAllMoviesAndTv] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [genreData, movieData, tvShowData] = await Promise.all([
          getGenresFromSupabase(),
          getMoviesFromSupabase(),
          getTvShowsFromSupabase()
        ]);
        setGenres(genreData);
        setAllMoviesAndTv([...movieData, ...tvShowData]);
        setFilteredItems([...movieData, ...tvShowData]); // Mostrar todo al inicio
      } catch (err) {
        console.error("Error al cargar datos de géneros:", err);
        setError("¡Vaya! No pudimos cargar los géneros o los títulos. Intenta de nuevo más tarde.");
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  useEffect(() => {
    if (selectedGenre) {
      const items = allMoviesAndTv.filter(item => item.genre_ids && item.genre_ids.includes(selectedGenre.id));
      setFilteredItems(items);
    } else {
      setFilteredItems(allMoviesAndTv); // Mostrar todo si no hay género seleccionado
    }
  }, [selectedGenre, allMoviesAndTv]);

  const handleGenreClick = (genre) => {
    setSelectedGenre(prev => (prev && prev.id === genre.id ? null : genre)); // Toggle selection
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">Cargando géneros y títulos...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-red-500 text-xl">{error}</p>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: -50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="text-center"
    >
      <h1 className="text-4xl font-bold text-red-600 mb-8">Explorar por Géneros</h1>
      <p className="text-lg text-gray-300 mb-12">
        ¿Te apetece algo de acción, comedia o drama? Selecciona un género para filtrar
        películas y series.
      </p>

      <motion.div
        className="bg-gray-900 p-6 rounded-xl shadow-2xl border border-red-900 mb-12"
        initial={{ y: 50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.6 }}
      >
        <h2 className="text-2xl font-bold text-red-600 mb-6">Filtra por Género</h2>
        <div className="flex flex-wrap justify-center gap-3">
          {genres.map((genre) => (
            <motion.button
              key={genre.id}
              onClick={() => handleGenreClick(genre)}
              className={`px-5 py-2 rounded-full font-semibold text-lg transition-all duration-300
                ${selectedGenre && selectedGenre.id === genre.id
                  ? 'bg-red-700 text-white shadow-lg'
                  : 'bg-gray-700 text-gray-300 hover:bg-red-800 hover:text-white'
                }`}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              {genre.name}
            </motion.button>
          ))}
          {selectedGenre && (
            <motion.button
              onClick={() => setSelectedGenre(null)}
              className="px-5 py-2 rounded-full font-semibold text-lg bg-gray-600 text-white hover:bg-gray-500 transition-all duration-300"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              Mostrar Todos
            </motion.button>
          )}
        </div>
      </motion.div>

      {filteredItems.length > 0 ? (
        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4, duration: 0.5 }}
        >
          {filteredItems.map((item) => (
            <MovieCard key={item.id} item={item} />
          ))}
        </motion.div>
      ) : (
        <p className="text-gray-500 text-xl mt-8">
          No se encontraron títulos para el género seleccionado. ¡Qué mala suerte!
        </p>
      )}
    </motion.div>
  );
};

export default GenresPage;
================================================================================

Ruta: src/pages/DetailPage.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useParams, useLocation, Link } from 'react-router-dom';
import { getMediaDetailsFromSupabase, getGenresFromSupabase, addInteraction, getCommentsForMedia } from '../utils/api';
import { Star, Film, Tv, Calendar, Info, Link as LinkIcon, ThumbsUp, ThumbsDown, MessageSquare } from 'lucide-react';

const DetailPage = ({ currentUser }) => {
  const { id } = useParams();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const mediaType = queryParams.get('type');

  const [details, setDetails] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [genresMap, setGenresMap] = useState({});
  const [commentText, setCommentText] = useState('');
  const [comments, setComments] = useState([]);
  const [submittingComment, setSubmittingComment] = useState(false);

  useEffect(() => {
    const fetchDetailsAndComments = async () => {
      setLoading(true);
      setError(null);
      try {
        const genreData = await getGenresFromSupabase();
        const map = {};
        genreData.forEach(genre => {
          map[genre.id] = genre.name;
        });
        setGenresMap(map);

        const mediaDetails = await getMediaDetailsFromSupabase(id, mediaType);
        setDetails(mediaDetails);

        const mediaComments = await getCommentsForMedia(id, mediaType);
        setComments(mediaComments);

      } catch (err) {
        console.error("Error al cargar detalles:", err);
        setError("¡Vaya! No pudimos cargar los detalles de esta joya. Intenta de nuevo más tarde.");
      } finally {
        setLoading(false);
      }
    };

    fetchDetailsAndComments();
  }, [id, mediaType]);

  const handleLike = async (isLike) => {
    if (!currentUser) {
      alert('Necesitas iniciar sesión para dar "Me gusta" o "No me gusta".');
      return;
    }
    try {
      await addInteraction(currentUser.id, details.id, details.media_type, isLike ? 'like' : 'dislike');
      alert(`¡Has dado ${isLike ? 'Me gusta' : 'No me gusta'} a ${details.title || details.name}!`);
      // Aquí podrías actualizar el contador de likes/dislikes si lo tuvieras
    } catch (error) {
      alert('Error al registrar tu interacción. Intenta de nuevo.');
    }
  };

  const handleCommentSubmit = async (e) => {
    e.preventDefault();
    if (!currentUser) {
      alert('Necesitas iniciar sesión para comentar.');
      return;
    }
    if (!commentText.trim()) {
      alert('El comentario no puede estar vacío.');
      return;
    }

    setSubmittingComment(true);
    try {
      await addInteraction(currentUser.id, details.id, details.media_type, 'comment', commentText.trim());
      setCommentText('');
      // Recargar comentarios
      const updatedComments = await getCommentsForMedia(id, mediaType);
      setComments(updatedComments);
      alert('¡Comentario añadido con éxito!');
    } catch (error) {
      alert('Error al añadir el comentario. Intenta de nuevo.');
    } finally {
      setSubmittingComment(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">Cargando los secretos de esta obra maestra...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-red-500 text-xl">{error}</p>
      </div>
    );
  }

  if (!details) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">No hay detalles para mostrar. ¿Seguro que existe?</p>
      </div>
    );
  }

  const imageUrl = details.poster_path
    ? `https://image.tmdb.org/t/p/w500${details.poster_path}`
    : 'https://via.placeholder.com/500x750?text=No+Poster';
  const backdropUrl = details.backdrop_path
    ? `https://image.tmdb.org/t/p/original${details.backdrop_path}`
    : '';

  const title = details.title || details.name;
  const overview = details.overview || "Sinopsis no disponible. ¡Qué misterio!";
  const releaseDate = details.release_date || details.first_air_date;
  const rating = details.vote_average ? details.vote_average.toFixed(1) : 'N/A';
  const genres = details.genre_ids && details.genre_ids.length > 0
    ? details.genre_ids.map(id => genresMap[id]).filter(Boolean).join(', ')
    : 'Desconocido';

  const omdbDetails = details.omdbDetails; // Detalles de OMDb si se obtuvieron

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.6 }}
      className="relative bg-gray-900 rounded-xl shadow-2xl overflow-hidden border border-red-900"
    >
      {backdropUrl && (
        <div
          className="absolute inset-0 bg-cover bg-center opacity-20"
          style={{ backgroundImage: `url(${backdropUrl})` }}
        ></div>
      )}

      <div className="relative z-10 p-8 md:p-12 flex flex-col md:flex-row items-start md:items-center gap-8">
        <motion.img
          src={imageUrl}
          alt={title}
          className="w-full md:w-80 h-auto rounded-lg shadow-xl border border-gray-700 flex-shrink-0"
          initial={{ scale: 0.9, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        />

        <div className="flex-1 text-left">
          <h1 className="text-5xl font-extrabold text-red-600 mb-4 leading-tight">{title}</h1>
          <div className="flex items-center text-gray-300 text-lg mb-4">
            {mediaType === 'movie' ? <Film className="w-6 h-6 mr-2" /> : <Tv className="w-6 h-6 mr-2" />}
            <span>{mediaType === 'movie' ? 'Película' : 'Serie'}</span>
            <span className="mx-3 text-gray-600">|</span>
            <Star className="w-6 h-6 mr-2 text-yellow-400" />
            <span className="font-bold text-yellow-300">{rating}</span>
          </div>

          <p className="text-gray-400 text-lg mb-6 leading-relaxed">{overview}</p>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-8">
            <div className="flex items-center text-gray-300">
              <Calendar className="w-5 h-5 mr-2 text-red-500" />
              <span>Fecha de Lanzamiento: {releaseDate}</span>
            </div>
            <div className="flex items-center text-gray-300">
              <Info className="w-5 h-5 mr-2 text-red-500" />
              <span>Géneros: {genres}</span>
            </div>
            {omdbDetails && omdbDetails.Director && (
              <div className="flex items-center text-gray-300">
                <LinkIcon className="w-5 h-5 mr-2 text-red-500" />
                <span>Director: {omdbDetails.Director}</span>
              </div>
            )}
            {omdbDetails && omdbDetails.Actors && (
              <div className="flex items-center text-gray-300">
                <LinkIcon className="w-5 h-5 mr-2 text-red-500" />
                <span>Actores: {omdbDetails.Actors}</span>
              </div>
            )}
            {omdbDetails && omdbDetails.Runtime && (
              <div className="flex items-center text-gray-300">
                <LinkIcon className="w-5 h-5 mr-2 text-red-500" />
                <span>Duración: {omdbDetails.Runtime}</span>
              </div>
            )}
          </div>

          <motion.button
            className="bg-red-700 hover:bg-red-600 text-white font-bold py-3 px-8 rounded-full text-lg transition-colors duration-300 shadow-lg"
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => console.log('Reproducir:', title)}
          >
            Reproducir Ahora
          </motion.button>

          {/* Sección de "Me gusta / No me gusta" */}
          <div className="mt-12 pt-8 border-t border-gray-800">
            <h2 className="text-3xl font-bold text-red-600 mb-6">Interacciones</h2>
            <div className="flex space-x-4 mb-8">
              <motion.button
                onClick={() => handleLike(true)}
                className="flex items-center bg-green-700 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-full transition-colors duration-300"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <ThumbsUp className="w-5 h-5 mr-2" /> Me gusta
              </motion.button>
              <motion.button
                onClick={() => handleLike(false)}
                className="flex items-center bg-red-700 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full transition-colors duration-300"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <ThumbsDown className="w-5 h-5 mr-2" /> No me gusta
              </motion.button>
            </div>

            {/* Sección de Comentarios */}
            <h3 className="text-2xl font-bold text-red-500 mb-4">Comentarios ({comments.length})</h3>
            {currentUser ? (
              <form onSubmit={handleCommentSubmit} className="mb-8">
                <textarea
                  className="w-full p-3 bg-gray-800 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-red-700 resize-y min-h-[100px]"
                  placeholder="Escribe tu comentario aquí..."
                  value={commentText}
                  onChange={(e) => setCommentText(e.target.value)}
                  disabled={submittingComment}
                ></textarea>
                <motion.button
                  type="submit"
                  className="mt-4 bg-blue-700 hover:bg-blue-600 text-white font-bold py-2 px-6 rounded-full transition-colors duration-300"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  disabled={submittingComment}
                >
                  {submittingComment ? 'Enviando...' : 'Enviar Comentario'}
                </motion.button>
              </form>
            ) : (
              <p className="text-gray-400 mb-8">
                <Link to="/login" className="text-red-500 hover:underline">Inicia sesión</Link> para dejar un comentario.
              </p>
            )}

            <div className="space-y-4">
              {comments.length > 0 ? (
                comments.map((comment, index) => (
                  <motion.div
                    key={index}
                    className="bg-gray-800 p-4 rounded-lg border border-gray-700 text-left"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <p className="text-gray-300 font-semibold mb-1">
                      {comment.users?.username || 'Usuario Desconocido'}
                      <span className="text-gray-500 text-sm ml-2">
                        {new Date(comment.created_at).toLocaleDateString()}
                      </span>
                    </p>
                    <p className="text-gray-400">{comment.comment_text}</p>
                  </motion.div>
                ))
              ) : (
                <p className="text-gray-500">Sé el primero en comentar esta joya.</p>
              )}
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );
};

export default DetailPage;
================================================================================

Ruta: src/pages/LoginPage.js
------------------------------------------------------------
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';
import { signInUser } from '../utils/api';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      await signInUser(email, password);
      navigate('/'); // Redirigir a la página de inicio después del login
    } catch (err) {
      setError(err.message || 'Error al iniciar sesión. Verifica tus credenciales.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)]"
    >
      <div className="bg-gray-900 p-8 rounded-xl shadow-2xl w-full max-w-md border border-red-900">
        <h1 className="text-4xl font-bold text-red-700 mb-6 text-center">Iniciar Sesión</h1>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="email" className="block text-gray-300 text-sm font-bold mb-2">
              Correo Electrónico
            </label>
            <input
              type="email"
              id="email"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder="tu@email.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-gray-300 text-sm font-bold mb-2">
              Contraseña
            </label>
            <input
              type="password"
              id="password"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder=""
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          <motion.button
            type="submit"
            className="w-full bg-red-700 hover:bg-red-600 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-colors duration-300 text-lg"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            disabled={loading}
          >
            {loading ? 'Iniciando...' : 'Entrar'}
          </motion.button>
        </form>
        <p className="text-center text-gray-400 text-md mt-6">
          ¿No tienes una cuenta?{' '}
          <Link to="/register" className="text-red-500 hover:text-red-400 font-bold transition-colors">
            Regístrate aquí
          </Link>
        </p>
      </div>
    </motion.div>
  );
};

export default LoginPage;
================================================================================

Ruta: src/pages/RegisterPage.js
------------------------------------------------------------
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';
import { signUpUser } from '../utils/api';

const RegisterPage = () => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      setError('Las contraseñas no coinciden. ¡Qué despistado!');
      return;
    }
    setLoading(true);
    setError(null);
    try {
      await signUpUser(email, password, username);
      alert('¡Registro exitoso! Por favor, verifica tu correo electrónico para activar tu cuenta.');
      navigate('/login'); // Redirigir al login después del registro
    } catch (err) {
      setError(err.message || 'Error al registrar usuario. Intenta de nuevo.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)]"
    >
      <div className="bg-gray-900 p-8 rounded-xl shadow-2xl w-full max-w-md border border-red-900">
        <h1 className="text-4xl font-bold text-red-700 mb-6 text-center">Registrarse</h1>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="username" className="block text-gray-300 text-sm font-bold mb-2">
              Nombre de Usuario
            </label>
            <input
              type="text"
              id="username"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder="Tu nombre de usuario"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-gray-300 text-sm font-bold mb-2">
              Correo Electrónico
            </label>
            <input
              type="email"
              id="email"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder="tu@email.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-gray-300 text-sm font-bold mb-2">
              Contraseña
            </label>
            <input
              type="password"
              id="password"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder=""
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </div>
          <div>
            <label htmlFor="confirmPassword" className="block text-gray-300 text-sm font-bold mb-2">
              Confirmar Contraseña
            </label>
            <input
              type="password"
              id="confirmPassword"
              className="shadow appearance-none border border-gray-700 rounded-lg w-full py-3 px-4 bg-gray-800 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-red-700 focus:border-transparent transition-all duration-300"
              placeholder=""
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
            />
          </div>
          {error && <p className="text-red-500 text-sm text-center">{error}</p>}
          <motion.button
            type="submit"
            className="w-full bg-red-700 hover:bg-red-600 text-white font-bold py-3 px-4 rounded-lg focus:outline-none focus:shadow-outline transition-colors duration-300 text-lg"
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            disabled={loading}
          >
            {loading ? 'Registrando...' : 'Crear Cuenta'}
          </motion.button>
        </form>
        <p className="text-center text-gray-400 text-md mt-6">
          ¿Ya tienes una cuenta?{' '}
          <Link to="/login" className="text-red-500 hover:text-red-400 font-bold transition-colors">
            Inicia Sesión
          </Link>
        </p>
      </div>
    </motion.div>
  );
};

export default RegisterPage;
================================================================================

Ruta: src/pages/HomePage.js
------------------------------------------------------------
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { getTrendingMoviesAndStore, getPopularMoviesAndStore, getPopularTvShowsAndStore, getGenresFromSupabase } from '../utils/api';
import MovieCard from '../components/MovieCard';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap/dist/js/bootstrap.bundle.min';

const HomePage = ({ searchResults, loadingSearch, errorSearch }) => {
  const [trendingMovies, setTrendingMovies] = useState([]);
  const [popularMovies, setPopularMovies] = useState([]);
  const [popularTvShows, setPopularTvShows] = useState([]);
  const [genresMap, setGenresMap] = useState({});
  const [loadingContent, setLoadingContent] = useState(true);
  const [errorContent, setErrorContent] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoadingContent(true);
      setErrorContent(null);
      try {
        // Sincronizar y obtener datos de TMDB a Supabase
        const [trending, movies, tvShows, genres] = await Promise.all([
          getTrendingMoviesAndStore(1), // Obtiene y almacena en Supabase
          getPopularMoviesAndStore(1),
          getPopularTvShowsAndStore(1),
          getGenresFromSupabase() // Obtiene géneros de Supabase
        ]);

        setTrendingMovies(trending); // No slice aquí, el slice se hace en el renderizado si es necesario
        setPopularMovies(movies);
        setPopularTvShows(tvShows);

        const map = {};
        genres.forEach(genre => {
          map[genre.id] = genre.name;
        });
        setGenresMap(map);
      } catch (err) {
        console.error("Error al cargar datos de la página de inicio:", err);
        setErrorContent("¡Vaya! No pudimos cargar el contenido principal. Intenta de nuevo más tarde.");
      } finally {
        setLoadingContent(false);
      }
    };
    fetchData();
  }, []);

  const getGenreNames = (genreIds) => {
    if (!genreIds || genreIds.length === 0) return 'Desconocido';
    return genreIds.map(id => genresMap[id] || 'Desconocido').join(', ');
  };

  // Renderizado condicional para el estado de carga y error
  if (loadingContent) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-gray-400 text-xl">Cargando el universo cinematográfico...</p>
      </div>
    );
  }

  if (errorContent) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-200px)]">
        <p className="text-red-500 text-xl">{errorContent}</p>
      </div>
    );
  }

  // Si no hay errores y no está cargando, renderiza el contenido principal
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.7 }}
      className="text-center"
    >
      <h1 className="text-5xl font-extrabold text-red-700 mb-6 tracking-wide">
        Bienvenido a CineNerd
      </h1>
      <p className="text-xl text-gray-300 mb-12 max-w-3xl mx-auto">
        Tu destino definitivo para explorar el vasto universo de películas y series.
        Prepárate para perderte en horas de entretenimiento de alta calidad.
      </p>

      {/* Carrusel Dinámico de Bootstrap */}
      {trendingMovies.length > 0 && (
        <motion.div
          className="bg-gray-900 p-6 rounded-xl shadow-2xl mb-12 border border-red-900"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.6 }}
        >
          <h2 className="text-3xl font-bold text-red-600 mb-6">Películas y Series de la Semana</h2>
          <div id="movieCarousel" className="carousel slide carousel-fade" data-bs-ride="carousel">
            <div className="carousel-indicators">
              {trendingMovies.slice(0, 5).map((_, index) => (
                <button
                  key={index}
                  type="button"
                  data-bs-target="#movieCarousel"
                  data-bs-slide-to={index}
                  className={index === 0 ? 'active' : ''}
                  aria-current={index === 0 ? 'true' : 'false'}
                  aria-label={`Slide ${index + 1}`}
                ></button>
              ))}
            </div>
            <div className="carousel-inner rounded-lg">
              {trendingMovies.slice(0, 5).map((item, index) => (
                <div key={item.id} className={`carousel-item ${index === 0 ? 'active' : ''}`}>
                  <div className="relative w-full h-[500px] bg-cover bg-center rounded-lg overflow-hidden"
                       style={{ backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})` }}>
                    <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/70 to-transparent flex flex-col justify-end p-8 text-left">
                      <h3 className="text-5xl font-extrabold text-white mb-3 drop-shadow-lg">{item.title || item.name}</h3>
                      <p className="text-gray-300 text-lg mb-2">{getGenreNames(item.genre_ids)}</p>
                      <div className="flex items-center text-yellow-400 text-xl mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" className="w-6 h-6 mr-2 bi bi-star-fill" viewBox="0 0 16 16">
                          <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
                        </svg>
                        <span className="font-bold">{item.vote_average.toFixed(1)}</span>
                      </div>
                      <motion.button
                        className="bg-red-700 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-full self-start transition-colors duration-300"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => console.log('Ver detalles de:', item.title || item.name)} // Aquí iría la navegación a /detalle/:id
                      >
                        Ver ahora
                      </motion.button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            <button className="carousel-control-prev" type="button" data-bs-target="#movieCarousel" data-bs-slide="prev">
              <span className="carousel-control-prev-icon" aria-hidden="true"></span>
              <span className="visually-hidden">Previous</span>
            </button>
            <button className="carousel-control-next" type="button" data-bs-target="#movieCarousel" data-bs-slide="next">
              <span className="carousel-control-next-icon" aria-hidden="true"></span>
              <span className="visually-hidden">Next</span>
            </button>
          </div>
        </motion.div>
      )}

      {/* Sección de resultados de búsqueda (si los hay) */}
      {loadingSearch && (
        <p className="text-center text-gray-400 mt-8">Buscando en los confines del multiverso...</p>
      )}

      {errorSearch && (
        <p className="text-center text-red-500 mt-8">{errorSearch}</p>
      )}

      {searchResults.length > 0 && !loadingSearch && (
        <motion.div
          className="mt-12"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.5 }}
        >
          <h2 className="text-3xl font-bold text-red-600 mb-6 text-left">Resultados de Búsqueda</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {searchResults.map((item) => (
              <MovieCard key={item.id} item={item} />
            ))}
          </div>
        </motion.div>
      )}

      {/* Listado Dinámico de Películas Populares */}
      {popularMovies.length > 0 && (
        <motion.div
          className="mt-12 bg-gray-900 p-6 rounded-xl shadow-2xl border border-red-900"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.6 }}
        >
          <h2 className="text-3xl font-bold text-red-600 mb-6 text-left">Películas Populares</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {popularMovies.map((movie) => (
              <MovieCard key={movie.id} item={movie} />
            ))}
          </div>
        </motion.div>
      )}

      {/* Listado Dinámico de Series Populares */}
      {popularTvShows.length > 0 && (
        <motion.div
          className="mt-12 bg-gray-900 p-6 rounded-xl shadow-2xl border border-red-900"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.7, duration: 0.6 }}
        >
          <h2 className="text-3xl font-bold text-red-600 mb-6 text-left">Series Populares</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
            {popularTvShows.map((tvShow) => (
              <MovieCard key={tvShow.id} item={tvShow} />
            ))}
          </div>
        </motion.div>
      )}

      {searchResults.length === 0 && !loadingSearch && !errorSearch && trendingMovies.length === 0 && popularMovies.length === 0 && popularTvShows.length === 0 && (
        <p className="text-center text-gray-500 mt-8">
          Cargando el universo cinematográfico... o quizás no hay nada que mostrar.
        </p>
      )}
    </motion.div>
  );
};

export default HomePage;
================================================================================

Ruta: public/index.html
------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>
================================================================================
