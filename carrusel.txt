Aquí tienes un componente Carrusel reutilizable para React + TypeScript que usa Bootstrap 5 (y su dependencia oficial react-bootstrap).
Incluye:
Soporte para imágenes, textos y acciones personalizables.
Totalmente tipado.
Sin lógica de servidor (el backend lo dejo fuera porque el carrusel es 100 % presentacional).
1. Instala las dependencias (si aún no las tienes)
bash
Copy
npm i react-bootstrap bootstrap
# ó yarn add react-bootstrap bootstrap
2. Componente Carousel.tsx
tsx
Copy
// src/components/Carousel.tsx
import React from 'react';
import { Carousel as BCarousel, Image } from 'react-bootstrap';

export interface CarouselSlide {
  id: string | number;
  src: string;        // URL de la imagen
  alt: string;        // texto alternativo
  caption?: string;   // título (opcional)
  description?: string; // texto debajo del título (opcional)
  link?: string;      // URL al hacer clic en la imagen (opcional)
}

interface Props {
  slides: CarouselSlide[];
  height?: string | number; // altura fija del carrusel (por defecto 400px)
  indicators?: boolean;
  controls?: boolean;
  fade?: boolean;
}

const Carousel: React.FC<Props> = ({
  slides,
  height = 400,
  indicators = true,
  controls = true,
  fade = false,
}) => {
  return (
    <BCarousel
      fade={fade}
      indicators={indicators}
      controls={controls}
      style={{ maxHeight: height }}
    >
      {slides.map((s) => (
        <BCarousel.Item key={s.id}>
          <Image
            src={s.src}
            alt={s.alt}
            fluid
            style={{ width: '100%', height, objectFit: 'cover' }}
            onClick={() => s.link && window.open(s.link, '_blank')}
            className={s.link ? 'cursor-pointer' : ''}
          />
          {(s.caption || s.description) && (
            <BCarousel.Caption>
              <h3>{s.caption}</h3>
              <p>{s.description}</p>
            </BCarousel.Caption>
          )}
        </BCarousel.Item>
      ))}
    </BCarousel>
  );
};

export default Carousel;
3. Uso en cualquier página (ejemplo)
tsx
Copy
// src/pages/Home.tsx
import React from 'react';
import Carousel, { CarouselSlide } from '../components/Carousel';

const slides: CarouselSlide[] = [
  {
    id: 1,
    src: 'https://picsum.photos/1200/400?random=1',
    alt: 'Primera diapositiva',
    caption: 'Bienvenido a nuestra web',
    description: 'Explora todos nuestros servicios',
    link: '/servicios',
  },
  {
    id: 2,
    src: 'https://picsum.photos/1200/400?random=2',
    alt: 'Segunda diapositiva',
    caption: 'Calidad garantizada',
  },
];

const Home: React.FC = () => (
  <div className="container mt-4">
    <Carousel slides={slides} height={450} fade />
  </div>
);

export default Home;
4. Importa los estilos de Bootstrap (una sola vez)
En tu punto de entrada (p. ej. index.tsx o App.tsx):
tsx
Copy
import 'bootstrap/dist/css/bootstrap.min.css';
5. (Opcional) Backend Node.js
Si necesitas que las imágenes del carrusel sean dinámicas, crea un endpoint que devuelva un array CarouselSlide[] en JSON y llámalo desde React con axios, SWR, React-Query, etc. El componente ya está preparado para recibir cualquier array.
¡Listo! Tienes un carrusel 100 % Bootstrap, tipado y reutilizable en cualquier parte del proyecto.

Aquí tienes un pequeño add-on CSS puro que puedes pegar en tu proyecto para convertir tu carrusel Bootstrap en algo mucho más moderno y dinámico:
• flechas “<” y “>” personalizadas
• indicadores tipo “_ _ _” (en vez de los 3 puntos)
• efectos hover suaves y minimalistas
css
Copy
/* =========================================
   CARRUSEL – ESTILOS EXTRA
   ========================================= */
:root {
  --accent: #8c5bff;
  --accent-light: #b39ddb;
}

/* 1. Flechas con forma <  y  >  */
.carousel-control-prev-icon,
.carousel-control-next-icon {
  background: none;
  position: relative;
  width: 48px;
  height: 48px;
  transition: transform .4s cubic-bezier(.25,.8,.25,1);
}
.carousel-control-prev-icon::before,
.carousel-control-next-icon::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 14px;
  height: 14px;
  border-top: 3px solid var(--accent);
  border-right: 3px solid var(--accent);
  transform: translate(-50%, -50%) rotate(225deg); /* < */
}
.carousel-control-next-icon::before {
  transform: translate(-50%, -50%) rotate(45deg);  /* > */
}
.carousel-control-prev:hover .carousel-control-prev-icon,
.carousel-control-next:hover .carousel-control-next-icon {
  transform: scale(1.2);
}

/* 2. Indicadores _ _ _  (en vez de • • •) */
.carousel-indicators {
  bottom: 20px;
}
.carousel-indicators [data-bs-target] {
  width: 24px;
  height: 4px;
  border: none;
  margin: 0 6px;
  background: #e0e0e0;
  transition: width .3s, background-color .3s;
}
.carousel-indicators .active {
  width: 40px;
  background: var(--accent);
}

/* 3. Hover slide-caption */
.carousel-caption {
  transition: opacity .5s, transform .5s;
  opacity: 0;
  transform: translateY(20px);
}
.carousel-item:hover .carousel-caption,
.carousel-item:focus-within .carousel-caption {
  opacity: 1;
  transform: translateY(0);
}
Cómo usar
Copia el bloque CSS a tu archivo de estilos (o dentro de una etiqueta <style>).
No necesitas modificar JavaScript ni el HTML del carrusel; Bootstrap detectará automáticamente los estilos.
Si estás en React + TypeScript, agrégales un className propio al <Carousel> para mayor especificidad y evitar conflictos:
tsx
Copy
<Carousel className="modern-carousel" … />
y en tu CSS:
css
Copy
.modern-carousel .carousel-control-prev-icon … { … }
Con esto tendrás un look moderno, dinámico y accesible sin librerías extra.